d<- read.csv("https://raw.githubusercontent.com/antomys/5LabDataAnalysis/master/ratfeed.csv?token=AMCAJYFFCAAHS3YENBGXWZ25ZQOSQ",
stringsAsFactors = FALSE)
View(d)
View(d)
View(d)
View(d)
d
WeightAmount <-(d[,c(1,2)])
WeightAmount
WeightType <-(d[,c(1,3)])
WeightType
#Factorization -----------------
d$Diet.Amount <- as.factor(d$Diet.Amount)
d$Diet.Type <- as.factor(d$Diet.Type)
WeightAmount$Diet.Amount <- as.factor(WeightAmount$Diet.Amount)
WeightType$Diet.Type <- as.factor(WeightType$Diet.Type)
str(d)
str(WeightType)
str(WeightAmount)
#Average----------------------------------------
MeanA <-tapply(WeightAmount$Weight.Gain,WeightAmount$Diet.Amount,mean)
MeanTP <-tapply(WeightType$Weight.Gain,WeightType$Diet.Type,mean)
#Graphics ------------------------------------------------------------------------
stripchart(WeightAmount$Weight.Gain~WeightAmount$Diet.Amount,pch = 19,
col = c("blue", "red"))
stripchart(WeightType$Weight.Gain~WeightType$Diet.Type,pch = 19,
col = c("blue", "red", "black"))
Means <- data.frame( Weight.Gain= as.numeric(tapply(WeightType$Weight.Gain,
WeightType$Diet.Type, mean)),
Diet.Type = rep("Means", 3))
data <- rbind(WeightType,Means)
stripchart(data$Weight.Gain ~ data$Diet.Type, pch = 19,
col = c("blue", "red", "black"))
points(x = Means$Weight.Gain, y = c(4, 4, 4), pch = 19,
col = c("red", "black", "green"))
Means2 <- data.frame( Weight.Gain= as.numeric(tapply(WeightAmount$Weight.Gain,
WeightAmount$Diet.Amount, mean)),
Diet.Amount = rep("Means", 2))
data2 <- rbind(WeightAmount,Means2)
stripchart(data2$Weight.Gain ~ data2$Diet.Amount, pch = 19,
col = c("blue", "red", "black"))
#-------------------------------------------------------
#---------------------------------------------------------------------------------
#2. Провести дисперсійний аналіз для цих даних.
#ONE-WAY NORMAL ------------------------------
summary(d)
anova.res=aov(Diet.Amount~Diet.Type, data=d)
summary(anova.res)
#---------------------------------------
#Краскела-Уоллиса ---------------------
kruskal.test(Diet.Amount~Diet.Type,data=d)
#Розвідувальний Аналіз--------------------------------
library(ggplot2)
ggplot(data = d, aes(x = Diet.Type, y = Weight.Gain)) +
geom_boxplot(aes(fill = Diet.Amount))
#Описові статистики-----------------------------
#install.packages("doBy")
require(doBy)
summaryBy(Weight.Gain~Diet.Type+Diet.Amount,data=d,
FUN=c(mean,sd,length))
#Описові статистики-----------------------------
install.packages("doBy")
require(doBy)
summaryBy(Weight.Gain~Diet.Type+Diet.Amount,data=d,
FUN=c(mean,sd,length))
#Графік дизайна експеримента--------------------
plot.design(d)
#Графік взаємодії------------------
with(d, interaction.plot(x.factor=Diet.Amount,
trace.factor = Diet.Type,
response = Weight.Gain))
#Дисперсійний аналіз через lm()------------------
attach(d)
lm.res <-lm(Weight.Gain ~ Diet.Type*Diet.Amount)
summary(lm.res)
#У вигляді АНОВА таблиці:
anova(lm.res)
#3. Провести аналіз контрастів (якщо є потреба).
#Контрасты комбинаций условий (treatment contrasts)------------------
boxplot(Weight.Gain~Diet.Type, data=WeightType,
xlab="Тип дієти",ylab="Прибавка у вазі",
col="coral")
#Функция contrasts() позволяет ознакомиться
#с матрицей контрастов для того или иного фактора:
contrasts(d$Diet.Type)
#Контрасты сумм (sum contrasts)----------------------
contrasts(d$Diet.Type)<-contr.sum(n=3)
contrasts(d$Diet.Type)
#Выполнив дисперсионный анализ, увидим,
#что интерпретация оцененных параметров модели
#теперь также изменилась:
lm3.res<- lm(Weight.Gain~Diet.Type,data=d)
summary(lm3.res)
with(d, mean(tapply(Weight.Gain, Diet.Type, mean)))
#Контрасты Хелмерта --------------------------------
contrasts(d$Diet.Type) <- contr.helmert(n = 3)
contrasts(d$Diet.Type)
#Обратите внимание: суммы по всем столбцам матрицы контрастов Хелмерта равны нулю. Кроме того, сумма произведений элементов
#любых двух столбцов матрицы также равна нулю. Например:
mat <- contrasts(d$Diet.Type)
sum(mat[, 1]*mat[, 2])
lm.res4 <- lm(Weight.Gain ~ Diet.Type, data = d)
summary(lm.res4)
install.packages("doBy")
install.packages("doBy")
x<- read.csv("cars.csv",
stringsAsFactors = FALSE)
x
d<- read.csv("https://raw.githubusercontent.com/antomys/5LabDataAnalysis/master/ratfeed.csv?token=AMCAJYFFCAAHS3YENBGXWZ25ZQOSQ",
stringsAsFactors = FALSE)
d1 <- read.csv("https://raw.githubusercontent.com/antomys/5LabDataAnalysis/master/ratfeed.csv?token=AMCAJYFFCAAHS3YENBGXWZ25ZQOSQ",
stringsAsFactors = FALSE)
d
WeightAmount <-(d[,c(1,2)])
WeightAmount
WeightType <-(d[,c(1,3)])
WeightType
#Factorization -----------------
d$Diet.Amount <- as.factor(d$Diet.Amount)
View(d)
View(d)
#Factorization -----------------
x$c <- as.factor(x$c)
#New Car Interest rates
# p = rate
# c = city
# 1 = Atlanta; 2 = Chicago; 3 = Houston
x<- read.csv("cars.csv",
stringsAsFactors = FALSE)
x
#Factorization -----------------
x$c <- as.factor(x$c)
str(d)
str(WeightType)
help(str)
#Average----------------------------------------
MeanC <-tapply(x$r,x$c,mean)
View(x)
View(x)
#Average----------------------------------------
MeanC <-tapply(x$p,x$c,mean)
stripchart(x$p~x$c,pch = 19,
col = c("blue", "red", "black"))
d<- read.csv("https://raw.githubusercontent.com/antomys/5LabDataAnalysis/master/ratfeed.csv?token=AMCAJYFFCAAHS3YENBGXWZ25ZQOSQ",
stringsAsFactors = FALSE)
d1 <- read.csv("https://raw.githubusercontent.com/antomys/5LabDataAnalysis/master/ratfeed.csv?token=AMCAJYFFCAAHS3YENBGXWZ25ZQOSQ",
stringsAsFactors = FALSE)
d
WeightAmount <-(d[,c(1,2)])
WeightAmount
WeightType <-(d[,c(1,3)])
WeightType
#Factorization -----------------
d$Diet.Amount <- as.factor(d$Diet.Amount)
d$Diet.Type <- as.factor(d$Diet.Type)
WeightAmount$Diet.Amount <- as.factor(WeightAmount$Diet.Amount)
WeightType$Diet.Type <- as.factor(WeightType$Diet.Type)
str(d)
str(WeightType)
str(WeightAmount)
#Average----------------------------------------
MeanA <-tapply(WeightAmount$Weight.Gain,WeightAmount$Diet.Amount,mean)
MeanTP <-tapply(WeightType$Weight.Gain,WeightType$Diet.Type,mean)
#Graphics ------------------------------------------------------------------------
stripchart(WeightAmount$Weight.Gain~WeightAmount$Diet.Amount,pch = 19,
col = c("blue", "red"))
stripchart(WeightType$Weight.Gain~WeightType$Diet.Type,pch = 19,
col = c("blue", "red", "black"))
Means <- data.frame( Weight.Gain= as.numeric(tapply(WeightType$Weight.Gain,
WeightType$Diet.Type, mean)),
Diet.Type = rep("Means", 3))
data <- rbind(WeightType,Means)
stripchart(data$Weight.Gain ~ data$Diet.Type, pch = 19,
col = c("blue", "red", "black"))
points(x = Means$Weight.Gain, y = c(4, 4, 4), pch = 19,
col = c("red", "black", "green"))
Means <- data.frame( p= as.numeric(tapply(x$p,
x$c, mean)),
c = rep("Means", 3))
data <- rbind(c,Means)
Means <- data.frame( Weight.Gain= as.numeric(tapply(WeightType$Weight.Gain,
WeightType$Diet.Type, mean)),
Diet.Type = rep("Means", 3))
View(Means)
View(Means)
data <- rbind(WeightType,Means)
Means <- data.frame( p= as.numeric(tapply(x$p,
x$c, mean)),
c = rep("Means", 3))
data <- rbind(x,Means)
Means <- data.frame( p= as.numeric(tapply(x$p,
x$c, mean)),
c = rep("Means", 3))
data <- rbind(x,Means)
stripchart(data$p ~ data$c, pch = 19,
col = c("blue", "red", "black"))
points(x = Means$p, y = c(4, 4, 4), pch = 19,
col = c("red", "black", "green"))
stripchart(data$p ~ data$c, pch = 19,
col = c("blue", "red", "green"))
points(x = Means$p, y = c(4, 4, 4), pch = 19,
col = c("blue", "red", "green"))
Means <- data.frame( Weight.Gain= as.numeric(tapply(WeightType$Weight.Gain,
WeightType$Diet.Type, mean)),
Diet.Type = rep("Means", 3))
data <- rbind(WeightType,Means)
stripchart(data$Weight.Gain ~ data$Diet.Type, pch = 19,
col = c("blue", "red", "black"))
points(x = Means$Weight.Gain, y = c(4, 4, 4), pch = 19,
col = c("red", "black", "green"))
Means <- data.frame( p= as.numeric(tapply(x$p,
x$c, mean)),
c = rep("Means", 3))
data <- rbind(x,Means)
stripchart(data$p ~ data$c, pch = 19,
col = c("blue", "red", "green"))
points(x = Means$p, y = c(4, 4, 4), pch = 19,
col = c("blue", "red", "green"))
#-------------------------------------------------------
#---------------------------------------------------------------------------------
#2. Провести дисперсійний аналіз для цих даних.
#ONE-WAY NORMAL ------------------------------
summary(ч)
#-------------------------------------------------------
#---------------------------------------------------------------------------------
#2. Провести дисперсійний аналіз для цих даних.
#ONE-WAY NORMAL ------------------------------
summary(x)
stripchart(data$p ~ data$c, pch = 19,
col = c("blue", "red", "black"))
points(x = Means$p, y = c(4, 4, 4), pch = 19,
col = c("red", "black", "green"))
stripchart(data$p ~ data$c, pch = 19,
col = c("blue", "red", "green"))
points(x = Means$p, y = c(4, 4, 4), pch = 19,
col = c("blue", "red", "green"))
#-------------------------------------------------------
#---------------------------------------------------------------------------------
#2. Провести дисперсійний аналіз для цих даних.
#ONE-WAY NORMAL ------------------------------
summary(x)
anova.res=aov(Diet.Amount~Diet.Type, data=d1)
summary(anova.res)
library(ggplot2)
install.packages("doBy")
require(doBy)
#---------------------------------------
#Краскела-Уоллиса ---------------------
kruskal.test(Diet.Amount~Diet.Type,data=d)
#---------------------------------------
#Краскела-Уоллиса ---------------------
kruskal.test(p~c,data=d)
#---------------------------------------
#Краскела-Уоллиса ---------------------
kruskal.test(Diet.Amount~Diet.Type,data=d)
#Розвідувальний Аналіз--------------------------------
library(ggplot2)
ggplot(data = d, aes(x = Diet.Type, y = Weight.Gain)) +
geom_boxplot(aes(fill = Diet.Amount))
#---------------------------------------
#Краскела-Уоллиса ---------------------
kruskal.test(x$p~x$c,data=d)
#---------------------------------------
#Краскела-Уоллиса ---------------------
kruskal.test(x$p~x$c,data=x)
ggplot(data = x, aes(x = x$c, y = x$p))
ggplot(data = x, aes(x = x$c, y = x$p)) +
geom_boxplot(aes(fill = x$c))
#Описові статистики-----------------------------
summaryBy(x$p~x$c,data=x,
FUN=c(mean,sd,length))
kruskal.test(Diet.Amount~Diet.Type,data=d)
ggplot(data = d, aes(x = Diet.Type, y = Weight.Gain)) +
geom_boxplot(aes(fill = Diet.Amount))
require(doBy)
install.packages("doBy")
require(doBy)
install.packages("doBy")
install.packages("doBy")
summaryBy(Weight.Gain~Diet.Type+Diet.Amount,data=d,
FUN=c(mean,sd,length))
require(doBy)
summaryBy(Weight.Gain~Diet.Type+Diet.Amount,data=d,
FUN=c(mean,sd,length))
#Графік дизайна експеримента--------------------
plot.design(d)
#Описові статистики-----------------------------
summaryBy(x$p~x$c,data=x,
FUN=c(mean,sd,length))
#Графік дизайна експеримента--------------------
plot.design(x)
#Графік дизайна експеримента--------------------
plot.design(d)
#Графік дизайна експеримента--------------------
plot.design(x)
#Графік взаємодії------------------
with(d, interaction.plot(x.factor=Diet.Amount,
trace.factor = Diet.Type,
response = Weight.Gain))
lm.res <-lm(x$p ~ x$c)
summary(lm.res)
#У вигляді АНОВА таблиці:
anova(lm.res)
help(anova)
#Дисперсійний аналіз через lm()------------------
attach(x)
lm.res <-lm(x$p ~ x$c)
summary(lm.res)
#3. Провести аналіз контрастів (якщо є потреба).
#Контрасты комбинаций условий (treatment contrasts)------------------
boxplot(x$p~x$c, data=x)
#Функция contrasts() позволяет ознакомиться
#с матрицей контрастов для того или иного фактора:
contrasts(x$c)
#Контрасты сумм (sum contrasts)----------------------
contrasts(x$c)<-contr.sum(n=3)
contrasts(x$c)
#Выполнив дисперсионный анализ, увидим,
#что интерпретация оцененных параметров модели
#теперь также изменилась:
lm3.res<- lm(x$p~x$c,data=x)
summary(lm3.res)
with(x, mean(tapply(x$p, x$c, mean)))
#Контрасты Хелмерта --------------------------------
contrasts(x$c) <- contr.helmert(n = 3)
contrasts(x$c)
#Обратите внимание: суммы по всем столбцам матрицы контрастов Хелмерта равны нулю. Кроме того, сумма произведений элементов
#любых двух столбцов матрицы также равна нулю. Например:
mat <- contrasts(x$c)
sum(mat[, 1]*mat[, 2])
lm.res4 <- lm(Weight.Gain ~ Diet.Type, data = d)
lm.res4 <- lm(x$p ~ x$c, data = x)
summary(lm.res4)
#4. За результатами аналізу зробити висновки.
hist(x$p)
#4. За результатами аналізу зробити висновки.
help(lm)
#Дисперсійний аналіз через lm()------------------
attach(x)
lm.res <-lm(x$p ~ x$c)
summary(lm.res)
#У вигляді АНОВА таблиці:
anova(lm.res)
library(ggplot2)
install.packages("doBy")
install.packages("doBy")
require(doBy)
#New Car Interest rates
# p = rate
# c = city
# 1 = Atlanta; 2 = Chicago; 3 = Houston
x<- read.csv("cars.csv",stringsAsFactors = FALSE)
#Factorization -----------------
x$c <- as.factor(x$c)
#1
#Average----------------------------------------
MeanC <-tapply(x$p,x$c,mean)
#Graphics ------------------------------------------------------------------------
stripchart(x$p~x$c,pch = 19,col = c("blue", "red", "black"))
stripchart(x$p~x$c,pch = 19,col = c("blue", "red", "black"))
Means <- data.frame( p= as.numeric(tapply(x$p,x$c, mean)),c = rep("Means", 3))
data <- rbind(x,Means)
stripchart(data$p ~ data$c, pch = 19,col = c("blue", "red", "green"))
points(x = Means$p, y = c(4, 4, 4), pch = 19,col = c("blue", "red", "green"))
#2
#ONE-WAY NORMAL ------------------------------
summary(x)
anova.res=aov(Diet.Amount~Diet.Type, data=d1)
ggplot(data = x, aes(x = x$c, y = x$p)) +
geom_boxplot(aes(fill = x$c))
library(ggplot2)
ggplot(data = x, aes(x = x$c, y = x$p)) +
geom_boxplot(aes(fill = x$c))
#Графік дизайна експеримента--------------------
plot.design(x)
help(lm)
#DA cherez liniynu model lm()
attach(x)
lm.res <-lm(x$p ~ x$c)
summary(lm.res)
#У вигляді АНОВА таблиці:
anova(lm.res)
#norm DA
anova(lm.res)
summary(lm.res)
#norm DA
anova(lm.res)
#3
#Контрасты комбинаций условий (treatment contrasts)------------------
boxplot(x$p~x$c, data=x)
#Функция contrasts() позволяет ознакомиться
#с матрицей контрастов для того или иного фактора:
contrasts(x$c)
#Контрасты сумм (sum contrasts)----------------------
contrasts(x$c)<-contr.sum(n=3)
contrasts(x$c)
View(lm.res)
View(lm.res)
#3
contrasts(x$c) #matrica contrastiv
contrasts(x$c)<-contr.sum(n=3) #contrasty sum
#3
contrasts(x$c) #matrica contrastiv
#Выполнив дисперсионный анализ, увидим,
#что интерпретация оцененных параметров модели
#теперь также изменилась:
lm3.res<- lm(x$p~x$c,data=x)
summary(lm3.res)
with(x, mean(tapply(x$p, x$c, mean)))
help(with)
#contrast helmerta
contrasts(x$c) <- contr.helmert(n = 3)
contrasts(x$c)
#Обратите внимание: суммы по всем столбцам матрицы контрастов Хелмерта равны нулю. Кроме того, сумма произведений элементов
#любых двух столбцов матрицы также равна нулю. Например:
mat <- contrasts(x$c)
sum(mat[, 1]*mat[, 2])
lm.res4 <- lm(x$p ~ x$c, data = x)
summary(lm.res4)
install.packages("doBy")
require(doBy)
library(ggplot2)
#New Car Interest rates
# p = rate
# c = city
# 1 = Atlanta; 2 = Chicago; 3 = Houston
x<- read.csv("cars.csv",stringsAsFactors = FALSE)
x$c <- as.factor(x$c)
str(x)
#1
MeanC <-tapply(x$p,x$c,mean) #seredni znachennya po kozhniy gradacii
stripchart(x$p~x$c,pch = 19,col = c("blue", "red", "black"))
Means <- data.frame( p= as.numeric(tapply(x$p,x$c, mean)),c = rep("Means", 3))
data <- rbind(x,Means)
stripchart(data$p ~ data$c, pch = 19,col = c("blue", "red", "green"))
points(x = Means$p, y = c(4, 4, 4), pch = 19,col = c("blue", "red", "green"))
#2
summary(x)
ggplot(data = x, aes(x = x$c, y = x$p)) + geom_boxplot(aes(fill = x$c))
plot.design(x)
kruskal.test(x$p,x$c,data=x)
#3
contrasts(x$c) #matrica contrastiv
contrasts(x$c)<-contr.sum(n=3) #contrasty sum
contrasts(x$c)
#vykonuemo DA. interpritacia ocinenyh parametriv modely takoj zminilasya
lm3.res<- lm(x$p~x$c,data=x)
summary(lm3.res)
with(x, mean(tapply(x$p, x$c, mean)))
#contrast helmerta
contrasts(x$c) <- contr.helmert(n = 3)
contrasts(x$c)
#suma po stovpcyah = 0 i suma dobutkiv stovpciv takoj = 0. napr:
mat <- contrasts(x$c)
sum(mat[, 1]*mat[, 2])
#rahuemo parametry novoi liniinoi modeli
lm.res4 <- lm(x$p ~ x$c, data = x)
summary(lm.res4)
K<-aov(x$p ~ x$c, data=x)
TukeyHSD(K)
plot(TukeyHSD(K))
plot(TukeyHSD(K), las=1)
View(x)
View(x)
View(x)
#New Car Interest rates
# p = rate
# c = city
# 1 = Atlanta; 2 = Chicago; 3 = Houston
x<- read.csv("cars.csv",stringsAsFactors = FALSE)
x$c <- as.factor(x$c)
#1
MeanC <-tapply(x$p,x$c,mean) #seredni znachennya po kozhniy gradacii
stripchart(x$p~x$c,pch = 19,col = c("blue", "red", "black"))
Means <- data.frame( p= as.numeric(tapply(x$p,x$c, mean)),c = rep("Means", 3))
data <- rbind(x,Means)
stripchart(data$p ~ data$c, pch = 19,col = c("blue", "red", "green"))
points(x = Means$p, y = c(4, 4, 4), pch = 19,col = c("blue", "red", "green"))
#2
summary(x)
ggplot(data = x, aes(x = x$c, y = x$p)) + geom_boxplot(aes(fill = x$c))
plot.design(x)
#DA cherez liniynu model lm()
attach(x)
lm.res <-lm(x$p ~ x$c)
summary(lm.res)
anova(lm.res)#norm DA
kruskal.test(x$p,x$c,data=x) #kruskal-wallis DA
#3
contrasts(x$c) #matrica contrastiv
contrasts(x$c)<-contr.sum(n=3) #contrasty sum
contrasts(x$c)
#vykonuemo DA. interpritacia ocinenyh parametriv modely takoj zminilasya
lm3.res<- lm(x$p~x$c,data=x)
summary(lm3.res)
#contrast helmerta
contrasts(x$c) <- contr.helmert(n = 3)
contrasts(x$c)
#suma po stovpcyah = 0 i suma dobutkiv stovpciv takoj = 0. napr:
mat <- contrasts(x$c)
sum(mat[, 1]*mat[, 2])
#rahuemo parametry novoi liniinoi modeli
lm.res4 <- lm(x$p ~ x$c, data = x)
summary(lm.res4)
#an kontr met tuki
K<-aov(x$p ~ x$c, data=x)
TukeyHSD(K)
plot(TukeyHSD(K), las=1)
